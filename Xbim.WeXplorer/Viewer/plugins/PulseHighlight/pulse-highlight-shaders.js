"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
* This file has been generated by spacker.exe utility. Do not change this file manualy as your changes
* will get lost when the file is regenerated. Original content is located in *.c files.
*/
exports.PulseShaders = {
    pulse_fshader: ' precision highp float; uniform vec4 uClippingPlaneA; uniform vec4 uClippingPlaneB; uniform bool uClippingA; uniform bool uClippingB; varying vec4 vFrontColor; varying vec4 vBackColor; varying vec3 vPosition; varying float vDiscard; void main(void) { if (vDiscard > 0.5) discard; if (uClippingA) { vec4 p = uClippingPlaneA; vec3 x = vPosition; float distance = (dot(p.xyz, x) + p.w) / length(p.xyz); if (distance < 0.0) { discard; } } if (uClippingB) { vec4 p = uClippingPlaneB; vec3 x = vPosition; float distance = (dot(p.xyz, x) + p.w) / length(p.xyz); if (distance < 0.0) { discard; } } gl_FragColor = gl_FrontFacing ? vFrontColor : vBackColor; }',
    pulse_vshader: ' attribute highp vec3 aPosition; attribute highp vec2 aState; attribute highp vec2 aNormal; uniform mat4 uMVMatrix; uniform mat4 uPMatrix; uniform vec4 uHighlightColour; uniform float uHighlightAlphaMin; uniform float uHighlightAlphaMax; uniform float uSin; varying vec4 vFrontColor; varying vec4 vBackColor; uniform highp sampler2D uStateStyleSampler; varying vec3 vPosition; varying float vDiscard; vec2 getTextureCoordinates(int index, int size) { float x = float(index - (index / size) * size); float y = float(index / size); float pixelSize = 1.0 / float(size); return vec2((x + 0.5) * pixelSize, (y + 0.5) * pixelSize); } vec4 getColor() { int restyle = int(floor(aState[1] + 0.5)); if (restyle > 224) { return uHighlightColour; } vec2 coords = getTextureCoordinates(restyle, 15); return texture2D(uStateStyleSampler, coords); } vec3 getNormal() { float U = aNormal[0]; float V = aNormal[1]; float PI = 3.1415926535897932384626433832795; float lon = U / 252.0 * 2.0 * PI; float lat = V / 252.0 * PI; float x = sin(lon) * sin(lat); float z = cos(lon) * sin(lat); float y = cos(lat); return normalize(vec3(x, y, z)); } void main(void) { int state = int(floor(aState[0] + 0.5)); vDiscard = 0.0; if (state != 253) { vDiscard = 1.0; vFrontColor = vec4(0.0, 0.0, 0.0, 0.0); vBackColor = vec4(0.0, 0.0, 0.0, 0.0); vPosition = vec3(0.0, 0.0, 0.0); gl_Position = vec4(0.0, 0.0, 0.0, 1.0); return; } vec3 normal = getNormal(); float normalRatio = 0.5 + 0.5 * dot(normal, vec3(0.0, 0.0, 1.0)); vec4 baseColor = vec4( getColor().rgb * normalRatio, uHighlightAlphaMin + (uHighlightAlphaMax - uHighlightAlphaMin) * uSin ); vFrontColor = baseColor; vBackColor = baseColor; vPosition = aPosition; gl_Position = uPMatrix * uMVMatrix * vec4(aPosition, 1.0); }'
};
//# sourceMappingURL=pulse-highlight-shaders.js.map